---
AWSTemplateFormatVersion: '2010-09-09'

###
# aws cloudformation validate-template --template-body file:///<base_path_here>/aws-fargate.yml --profile <aws_profile_name>
# aws cloudformation create-stack --stack-name DefectDojo-Fargate --template-body file:///<base_path_here>/aws-fargate.yml --profile <aws_profile_name>
###

Description:
  CloudFormation template for DefectDojo deployment on AWS Fargate
  Depencencies (not in scope of this template)
    - Creation of Fargate cluster including its VPC and Subnet(s)
    - Creation of the AWS IAM Role allowing the containertaskrole on runtime
    - Creation of external SQL database (like AWS RDS MySQL)

Parameters:
  # Fargate
  FargateClusterName:
    Description: Cluster Name
    Type: String
    Default: DefectDojo-Cluster
  FargateServiceName:
    Description: ServiceName attribute of the Fargate service
    Type: String
    Default: DefectDojo-Service
  FargateRole:
    Description: AWS IAM Role
    Type: String
    Default: arn:aws:iam::<account_id>:role/<role_name>
  # Database
  DdRdsClusterEndpoint:
    Description: Database URL
    Type: String
    Default: <cluster_name>.cluster-<cluster_id>.<region>.rds.amazonaws.com
  DdDatabasePort:
    Description: Database Port
    Type: Number
    Default: 3306
  DdDatabaseEngine:
    Description: Database Engine
    Type: String
    AllowedValues: 
      - django.db.backends.mysql
      - django.db.backends.postgresql
    Default: django.db.backends.mysql
  # Logging
  LogGroupName:
    Description: CloudWatch LogGroup ECS DefectDojo
    Type: String
    Default: /ecs/fargate/defectdojo
  # An EFS volume mount is required for custom settings that cannot be represented as environment
  # variables, and perhaps more importantly the RDS TLS certificate.  
  #
  # DATABASES['default']['OPTIONS'] = {
  #  'ssl': {'ca': '/app/dojo/settings/rds-combined-ca-bundle.pem'}
  # }
  FileSystemId:
    Description: File System for EFS Mount
    Type: String
    Default: <efs_filesystem_id>
  # Network
  NetworkVpcId:
    Description: Fargate vpc
    Type: String
    Default: vpc-vpc_id>
  NetworkSubnet1Id:
    Description: Fargate VPC subnet1
    Type: String
    Default: subnet-<region_1_subnet_id>
  NetworkSubnet2Id:
    Description: Fargate VPC subnet2
    Type: String
    Default: subnet-<region_2_subnet_id>   
  NetworkSubnet3Id:
    Description: Fargate VPC subnet3
    Type: String
    Default: subnet-<region_3_subnet_id> 
  NetworkIpIngress:
    Description: Allowed Inbound IP for NGINX traffic on 8080 (used by SG)
    Type: String
    Default: <your_ip>/32
  # Security Groups
  AuroraSecurityGroupId:
    Description: Security Group for the DefectDojo Aurora Cluster
    Type: String
    Default: <security_group_id>
  EfsVolumeSecurityGroupId:
   Description: Security Group for the EFS volume mounted within the container
   Type: String
   Default: <security_group_id>
  # Region
  Region:
    Description: AWS Region
    Type: String
    Default: <region>

Resources:
  ## Logging
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref LogGroupName
      RetentionInDays: 1

  ## Fargate Task
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      RequiresCompatibilities:
      - FARGATE
      NetworkMode: awsvpc
      Family: defectdojo
      ExecutionRoleArn: !Ref FargateRole
      Cpu: '2048'
      Memory: '4096'
      Volumes:
        - Name: EFS_BindMount_Settings
          EFSVolumeConfiguration:
            FilesystemId: !Ref FileSystemId
            RootDirectory: /settings
      ContainerDefinitions:

      - Name: nginx
        Image: defectdojo/defectdojo-nginx:latest
        DependsOn: 
        - ContainerName: uwsgi
          Condition: START
        Essential: true
        HealthCheck:
          Command: [ "CMD-SHELL", "curl -f http://localhost:8080/ || exit 1" ]
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref LogGroupName
            awslogs-region: !Ref Region
            awslogs-stream-prefix: ecs
        PortMappings:
        - ContainerPort: 8080
          Protocol: tcp
        Environment:
        - Name: DD_UWSGI_HOST
          Value: 127.0.0.1 
        - Name: DD_UWSGI_PASS
          Value: uwsgi_server
        - Name: DD_UWSGI_PORT
          Value: 3031 

      - Name: uwsgi
        Image: defectdojo/defectdojo-django:latest
        Essential: true
        EntryPoint: 
          - '/entrypoint-uwsgi.sh'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref LogGroupName
            awslogs-region: !Ref Region
            awslogs-stream-prefix: ecs
        MountPoints:
          - ContainerPath: /app/dojo/settings
            ReadOnly: false
            SourceVolume: EFS_BindMount_Settings
        PortMappings:
        - ContainerPort: 3031
          Protocol: tcp
        Environment:
        - Name: DD_DEBUG
          Value: "on"
        - Name: DD_ALLOWED_HOSTS
          Value: "*"
        - Name: DD_DATABASE_URL
          Value: !Sub
          - "mysql://${User}:${Password}@${ClusterWriterEndpoint}:${Port}/defectdojo"
          - User: '{{resolve:secretsmanager:<secret>/<name>/<here>:SecretString:username}}'
            Password: '{{resolve:secretsmanager:<secret>/<name>/<here>:SecretString:password}}'
            ClusterWriterEndpoint: !Ref DdRdsClusterEndpoint
            Port: !Ref DdDatabasePort
        - Name: DD_DATABASE_HOST
          Value: !Ref DdRdsClusterEndpoint
        - Name: DD_DATABASE_PASSWORD
          Value: '{{resolve:secretsmanager:<secret>/<name>/<here>:SecretString:password}}'
        - Name: DD_DATABASE_PORT
          Value: !Ref DdDatabasePort
        - Name: DD_DATABASE_ENGINE
          Value: !Ref DdDatabaseEngine
        - Name: DD_CELERY_BROKER_URL
          Value: amqp://guest:guest@127.0.0.1:5672
        - Name: DD_SECRET_KEY
          Value: '{{resolve:secretsmanager:<secret>/<name>/<here>:SecretString:ddSecretKey}}'

      - Name: celerybeat
        Image: defectdojo/defectdojo-django:latest
        DependsOn: 
        - ContainerName: rabbitmq
          Condition: START
        Essential: true
        EntryPoint:
          - '/entrypoint-celery-beat.sh'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref LogGroupName
            awslogs-region: !Ref Region
            awslogs-stream-prefix: ecs
        MountPoints:
          - ContainerPath: /app/dojo/settings
            ReadOnly: false
            SourceVolume: EFS_BindMount_Settings
        Environment:
        - Name: DD_DATABASE_URL
          Value: !Sub
          - "mysql://${User}:${Password}@${ClusterWriterEndpoint}:${Port}/defectdojo"
          - User: '{{resolve:secretsmanager:<secret>/<name>/<here>:SecretString:username}}'
            Password: '{{resolve:secretsmanager:<secret>/<name>/<here>:SecretString:password}}'
            ClusterWriterEndpoint: !Ref DdRdsClusterEndpoint
            Port: !Ref DdDatabasePort
        - Name: DD_DATABASE_HOST
          Value: !Ref DdRdsClusterEndpoint
        - Name: DD_DATABASE_PASSWORD
          Value: '{{resolve:secretsmanager:<secret>/<name>/<here>:SecretString:password}}'
        - Name: DD_DATABASE_PORT
          Value: !Ref DdDatabasePort
        - Name: DD_DATABASE_ENGINE
          Value: !Ref DdDatabaseEngine
        - Name: DD_CELERY_BROKER_URL
          Value: amqp://guest:guest@127.0.0.1:5672
        - Name: DD_SECRET_KEY
          Value: '{{resolve:secretsmanager:<secret>/<name>/<here>:SecretString:ddSecretKey}}'

      - Name: celeryworker
        Image: defectdojo/defectdojo-django:latest
        Essential: true
        DependsOn: 
        - ContainerName: rabbitmq
          Condition: START        
        EntryPoint: 
          - '/entrypoint-celery-worker.sh'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref LogGroupName
            awslogs-region: !Ref Region
            awslogs-stream-prefix: ecs
        MountPoints:
          - ContainerPath: /app/dojo/settings
            ReadOnly: false
            SourceVolume: EFS_BindMount_Settings
        Environment:
        - Name:  DD_DATABASE_URL
          Value: !Sub
          - "mysql://${User}:${Password}@${ClusterWriterEndpoint}:${Port}/defectdojo"
          - User: '{{resolve:secretsmanager:<secret>/<name>/<here>:SecretString:username}}'
            Password: '{{resolve:secretsmanager:<secret>/<name>/<here>:SecretString:password}}'
            ClusterWriterEndpoint: !Ref DdRdsClusterEndpoint
            Port: !Ref DdDatabasePort
        - Name: DD_DATABASE_HOST
          Value: !Ref DdRdsClusterEndpoint
        - Name: DD_DATABASE_PASSWORD
          Value: '{{resolve:secretsmanager:<secret>/<name>/<here>:SecretString:password}}'
        - Name: DD_DATABASE_PORT
          Value: !Ref DdDatabasePort
        - Name: DD_DATABASE_ENGINE
          Value: !Ref DdDatabaseEngine
        - Name: DD_CELERY_BROKER_URL
          Value: amqp://guest:guest@127.0.0.1:5672     
        - Name: DD_SECRET_KEY
          Value: '{{resolve:secretsmanager:<secret>/<name>/<here>:SecretString:ddSecretKey}}'             

      - Name: initializer
        Image: defectdojo/defectdojo-django:latest
        Essential: false    
        EntryPoint: 
          - '/entrypoint-initializer.sh'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref LogGroupName
            awslogs-region: !Ref Region
            awslogs-stream-prefix: ecs
        MountPoints:
          - ContainerPath: /app/dojo/settings
            ReadOnly: false
            SourceVolume: EFS_BindMount_Settings
        Environment:
        - Name:  DD_DATABASE_URL
          Value: !Sub
          - "mysql://${User}:${Password}@${ClusterWriterEndpoint}:${Port}/defectdojo"
          - User: '{{resolve:secretsmanager:<secret>/<name>/<here>:SecretString:username}}'
            Password: '{{resolve:secretsmanager:<secret>/<name>/<here>:SecretString:password}}'
            ClusterWriterEndpoint: !Ref DdRdsClusterEndpoint
            Port: !Ref DdDatabasePort
        - Name: DD_DATABASE_HOST
          Value: !Ref DdRdsClusterEndpoint
        - Name: DD_DATABASE_PASSWORD
          Value: '{{resolve:secretsmanager:<secret>/<name>/<here>:SecretString:password}}'
        - Name:  DD_ADMIN_USER
          Value: admin
        - Name : DD_ADMIN_MAIL
          Value: admin@defectdojo.local
        - Name: DD_ADMIN_FIRST_NAME
          Value: Admin   
        - Name:  DD_ADMIN_LAST_NAME
          Value: User
        - Name:  DD_INITIALIZE
          Value: true
        - Name: DD_SECRET_KEY
          Value: '{{resolve:secretsmanager:<secret>/<name>/<here>:SecretString:ddSecretKey}}'

      - Name: rabbitmq
        Image: rabbitmq:3.9.13-alpine@sha256:fc807e9439ac861631b022d191c57c0d3c28e54f72d02f36bf0bbd06d699cc8b
        Essential: true
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref LogGroupName
            awslogs-region: !Ref Region
            awslogs-stream-prefix: ecs
        PortMappings:
        - ContainerPort: 5672
          Protocol: tcp
  
  ## Fargate Service
  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref FargateClusterName
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      DesiredCount: 1
      EnableECSManagedTags: true
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
          - !Ref SecurityGroupDefectDojo
          Subnets:
          - !Ref NetworkSubnet1Id
          - !Ref NetworkSubnet2Id
          - !Ref NetworkSubnet3Id
      # PropagateTags: SERVICE
      ServiceName: !Ref FargateServiceName
      TaskDefinition: !Ref TaskDefinition

  ## Security Group
  SecurityGroupDefectDojo:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DefectDojo-ECS-SG
      GroupDescription: Security Group for the fargate defectdojo cluster     
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: !Ref NetworkIpIngress
      - IpProtocol: tcp
        FromPort: 8080
        ToPort: 8080
        CidrIp: !Ref NetworkIpIngress
      VpcId: !Ref NetworkVpcId
      Tags:
        - Key: Name
          Value: defectdojo
        - Key: Creator
          Value: <your_name_here>
        - Key: Contact
          Value: <your_email_address>

  SecurityGroupIngressFromAurora:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupDefectDojo
      Description: Inbound from the Aurora MySQL cluster
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref AuroraSecurityGroupId

  SecurityGroupIngressFromSelfAllPorts:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupDefectDojo
      Description: A loopback on the ECS Fargate cluster
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref SecurityGroupDefectDojo

  SecurityGroupAuroraIngressFromFargate:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref AuroraSecurityGroupId
      Description: Inbound from the ECS Fargate cluster
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      SourceSecurityGroupId: !Ref SecurityGroupDefectDojo

  SecurityGroupEfsIngressFromFargate:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EfsVolumeSecurityGroupId
      Description: Inbound from the ECS Fargate cluster
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !Ref SecurityGroupDefectDojo

  SecurityGroupDefectDojoInboundFromEfs:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SecurityGroupDefectDojo
      Description: Inbound NFS from the EFS volume
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !Ref EfsVolumeSecurityGroupId
